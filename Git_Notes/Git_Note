--------------------------------------------------------------

Git help

$ git --help
--> get main commands of git
$ git [command] -h
--> get main use of command

$ man git
--> get thorough use of git
$ git help [command]
$ git [command] --help
--> get thorough use of command

--------------------------------------------------------------

Creat and commit a git

$ git init
some change
$ git add .
$ git commit -m "some comment"
or $ git commit -v(enter the commit message on the 1st line)
$ git add remote origin https://github.com/qiang-cynthia/Git_Name
$ git push origin master
$ git status
$ git log [-p]

--------------------------------------------------------------

Pull a git 

$ git init
$ git add .
$ git add remote origin https://github.com/qiang-cynthia/Git_Name
$ git pull origin master
some change
$ git add .
$ git commit -m "some comment"
or $ git commit -v(enter the commit message on the 1st line)
$ git push origin master
$ git status
$ git log
some change in other repository
$ git pull origin master
$ git status
$ git log [-p]

--------------------------------------------------------------

Pull a particular git

$ git checkout <commit ID>

--------------------------------------------------------------

Branch

$ git checkout -b <branch_name>
--> creat a new branch

$ git checkout <branch_name>
--> switch to the existed branch

$ git branch
--> check the status of branches

$ git merge <branch_name>
--> merge another branch to the current branch

--------------------------------------------------------------

Git reset & git checkout & git revert

The git checkout command can be used in a commit, or file level scope. A file level checkout will change the file's contents to those of the specific commit.

The git reset command takes a specified commit to match the state of the repository at that specified commit, it can be invoked in three different modes which correspond to the three trees.

The git revert command takes a specified commit and creates a new commit which inverses the specified commit, it can only be run at a commit level scope and has no file level functionality.

Checkout and reset are generally used for making local or private 'undos'. They modify the history of a repository that can cause conflicts when pushing to remote shared repositories. Revert is considered a safe operation for 'public undos' as it creates new history which can be shared remotely and doesn't overwrite history remote team members may be dependent on.

$ git reset file_name
--> unstage the file that not be tracked, and the file will be moved form the stage to the working directory.

$ git reset commit_value
--> discard commits in a private branch or throw away uncommited changes.

$ git checkout file_name
--> discard changes in the working directory.

$ git checkout commit_value
--> switch between branches or inspect old stages.

$ git revert commit_value
--> undo commits in a public branch.
